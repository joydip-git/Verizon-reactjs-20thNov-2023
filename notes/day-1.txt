web applications
	HTML and CSS
	JavaScript
	TypeScript


web servers:
IIS, Tomcat....

application web server (app server)
host web app in the development machine using some port number and those web apps can be requested only from the dev machine


event-driven programming model

X => onx
click => onclick
mouseover => onmouseover


browsers:
	chrome: V8 (C++) => open source
	safari: JSCore
	firefox: spidermonkey
	........

2009
Ryan Dahl => Node JS (runtime environment for JS) - V8 engine (JS engine)
tools, chatbot, web api, ......
server side framework

two environments:
- browser (React JS)
- node



JavaScript:
a. data types: string, boolean, number, object
					**: undefined, function

Value related keywords:
					***: NaN, Infinity, NULL

declare a variable: var keyword
note: 
	there is no strict-typing in JS, hence JS is a loosely-typed language
	there is no static compile time type checking for JS
	JS is not an OOP language, it is object-based programming language

Object:
	collection of some properties (keys) and their values (literal values and functions)

every JS file has one hidden function: global function (like main function in any other programming language)

compilation and execution of JS:
1. preparation stage:
	all local variable and inner function 'DECLARATIONS' inside a function are (taken care of) registered in an object for that function (variable object - a property in the FEC which refers to that object) - hoisting

2. execution stage:
	actual execution takes place, i.e., all the assignments and function calls etc. are done

whenever you invoke any function in JS, a function execution context (FEC) object is created and stored in FECS (FEC stack)
every JS file do have a global (like invisible main) method. that's the method which gets automatically invoked first and GFEC is created. any other function called after this, a FEC will be created for the same and will be placed at the top of the GFEC.

Function Execution Context Object:
	a. variabale_object:
	b. this:
	c. scope:


ECMA:
ECMAScript=> guideline
<ES6  => vanilla JS
>=ES6 => new JS (ES6+)
ES6 - 2015
ES7 - 2016
ES8 - 2017
ES9 - 2018
ES10 - 2019
ES11 - 2020
ES12 - 2021
ES13 - 2022
in 2015, version 6 was released (ES6) and lots of new features were introduced
a. let keyword
b. class, constructor, extends, super etc.







	