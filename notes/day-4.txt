1. HTTP requests
2. rendering list of items in UI - map() of array and key property of react element
3. lifecycle of class components and Effect hook in functional component

4. use redux to maintain state of data out of component
5. routing in React

application structure and components:
Nested component => DashBoard
Routed Component:
http://localhost:3000/ or http://localhost:3000/home => Home
PageNotFound

routes:
http://localhost:3000/products => ProductList [FilterProduct + list of ProductRow]
http://localhost:3000/products/view/1 => ProductDetail
http://localhost:3000/products/edit/1 => EditProduct
http://localhost:3000/products/add => AddProduct


Sending HTTP request from React Application:
1. fetch() API 
2. third party (open source) API - axios

axios:
	get()
	post()
	put()
	delete()
	....

>npm i axios

axios instance => url, timeout, errormessage, interceptors

return type of all methods: 
Promise<AxiosResponse<any>> 
=> 
Promise<AxiosResponse<ApiResponse<Product[]>>>
	
"side effect" causing code:
fetching data from RESTful API server
sending some request using web socket
reading data from or writing data into a file
....................

class component => state and lifecycle related methods

mounting: componentDidMount
updation: componentDidUpdate, 
destruction/unmounting: compontWillUnmount

when a component is re-rendered:
	- when its state is updated
	- when parent state is updated
	- when from parent it receives new props

shouldComponentUpdate(){
	//is internal state is having updated data or not
	//did the component receive fresh props from its parent or not
	return true/false
}
render(){}


functional component => lifecycle type of facility via "effect hook" (useEffect)
useEffect(
	()=>{
		//side effect causing code		
		return ()=>{ //clean up code }
	},
	[value1, value2]
)

return RE






